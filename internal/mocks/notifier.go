// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/kkereziev/notifier/internal"
	"sync"
)

// Ensure, that NotifierMock does implement internal.Notifier.
// If this is not the case, regenerate this file with moq.
var _ internal.Notifier = &NotifierMock{}

// NotifierMock is a mock implementation of internal.Notifier.
//
//	func TestSomethingThatUsesNotifier(t *testing.T) {
//
//		// make and configure a mocked internal.Notifier
//		mockedNotifier := &NotifierMock{
//			NotifySMSFunc: func(contextMoqParam context.Context, ifaceVal any) error {
//				panic("mock out the NotifySMS method")
//			},
//			NotifySlackFunc: func(contextMoqParam context.Context, ifaceVal any) error {
//				panic("mock out the NotifySlack method")
//			},
//		}
//
//		// use mockedNotifier in code that requires internal.Notifier
//		// and then make assertions.
//
//	}
type NotifierMock struct {
	// NotifySMSFunc mocks the NotifySMS method.
	NotifySMSFunc func(contextMoqParam context.Context, ifaceVal any) error

	// NotifySlackFunc mocks the NotifySlack method.
	NotifySlackFunc func(contextMoqParam context.Context, ifaceVal any) error

	// calls tracks calls to the methods.
	calls struct {
		// NotifySMS holds details about calls to the NotifySMS method.
		NotifySMS []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// IfaceVal is the ifaceVal argument value.
			IfaceVal any
		}
		// NotifySlack holds details about calls to the NotifySlack method.
		NotifySlack []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// IfaceVal is the ifaceVal argument value.
			IfaceVal any
		}
	}
	lockNotifySMS   sync.RWMutex
	lockNotifySlack sync.RWMutex
}

// NotifySMS calls NotifySMSFunc.
func (mock *NotifierMock) NotifySMS(contextMoqParam context.Context, ifaceVal any) error {
	if mock.NotifySMSFunc == nil {
		panic("NotifierMock.NotifySMSFunc: method is nil but Notifier.NotifySMS was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		IfaceVal        any
	}{
		ContextMoqParam: contextMoqParam,
		IfaceVal:        ifaceVal,
	}
	mock.lockNotifySMS.Lock()
	mock.calls.NotifySMS = append(mock.calls.NotifySMS, callInfo)
	mock.lockNotifySMS.Unlock()
	return mock.NotifySMSFunc(contextMoqParam, ifaceVal)
}

// NotifySMSCalls gets all the calls that were made to NotifySMS.
// Check the length with:
//
//	len(mockedNotifier.NotifySMSCalls())
func (mock *NotifierMock) NotifySMSCalls() []struct {
	ContextMoqParam context.Context
	IfaceVal        any
} {
	var calls []struct {
		ContextMoqParam context.Context
		IfaceVal        any
	}
	mock.lockNotifySMS.RLock()
	calls = mock.calls.NotifySMS
	mock.lockNotifySMS.RUnlock()
	return calls
}

// NotifySlack calls NotifySlackFunc.
func (mock *NotifierMock) NotifySlack(contextMoqParam context.Context, ifaceVal any) error {
	if mock.NotifySlackFunc == nil {
		panic("NotifierMock.NotifySlackFunc: method is nil but Notifier.NotifySlack was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		IfaceVal        any
	}{
		ContextMoqParam: contextMoqParam,
		IfaceVal:        ifaceVal,
	}
	mock.lockNotifySlack.Lock()
	mock.calls.NotifySlack = append(mock.calls.NotifySlack, callInfo)
	mock.lockNotifySlack.Unlock()
	return mock.NotifySlackFunc(contextMoqParam, ifaceVal)
}

// NotifySlackCalls gets all the calls that were made to NotifySlack.
// Check the length with:
//
//	len(mockedNotifier.NotifySlackCalls())
func (mock *NotifierMock) NotifySlackCalls() []struct {
	ContextMoqParam context.Context
	IfaceVal        any
} {
	var calls []struct {
		ContextMoqParam context.Context
		IfaceVal        any
	}
	mock.lockNotifySlack.RLock()
	calls = mock.calls.NotifySlack
	mock.lockNotifySlack.RUnlock()
	return calls
}
